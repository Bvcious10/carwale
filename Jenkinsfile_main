pipeline{
    agent any
    tools{
        nodejs 'node16'
    }
    stages{
        stage('SAST scans'){
            steps{
              parallel(
                "semgrep":{
                    dir('client/src'){
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "docker run --rm -v ${pwd}:/src --workdir /src returntocorp/semgrep-agent:v1 semgrep-agent --config p/ci"
                        }
                    }

                        },
                        "njsscan":{
                            dir('client/src'){
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "docker run --rm -v ${pwd}:/src opensecurity/njsscan /src"
                                }
                            }
                        },
                        "trivyfs":{
                            dir('client/src'){
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "trivy fs ."
                                }

                            }
                        }
                    )
                }
                post{
                    always{
                        echo "SAST stage completed"
                    }
                }
            }
            stage('install dependencies'){
                steps{
                    dir('client'){
                    sh "npm install"
                    }

                }
            }

            stage('SCA scans'){
                steps{
                    script{
                        dir('client'){
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'dep-check'
                            dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                            }

                        }
                    }
                }
                post{
                    always{
                        echo "SCA stage completed"
                    }
                }
                
            }

            stage('Vulnerability check-docker'){
                steps{
                    parallel(
                        "OPA Conftest":{
                            dir('client'){
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sh "docker run --rm -v '${pwd}/workspace/car-app/client':/project openpolicyagent/conftest test --policy opa-docker.rego Dockerfile"
                                }
                            }

                        },
                        "Trivy scan":{
                            dir('client'){
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "bash trivy-base-image-scan.sh"
                                }
                            }

                        }
                    )
                }
                post{
                    always{
                        echo "vulnerability check stage completed"
                    }
                }
            }

            stage('Build and push docker image'){
                steps{
                    dir('client'){
                     withDockerRegistry(credentialsId: 'docker', url: '') {
                        sh 'docker build -t benvic/car-app:$GIT_COMMIT .'
                        sh 'docker push benvic/car-app:$GIT_COMMIT'
                        }    
                                  
                        }                   
                }
            }

            stage('docker-image-scan'){
                steps{
                    dir('client'){
                        sh 'trivy image benvic/car-app:$GIT_COMMIT'
                    }
                }
            }

            stage('kubernetes deployment'){
                steps{
                    dir('client/kubernetes'){
                        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kubeconfig', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                            sh "sed -i 's#replace#benvic/car-app:${GIT_COMMIT}#g' deployment_service.yaml"
                            sh "kubectl apply -f deployment_service.yaml"
}
                    }
                }
            }
        }
    }
