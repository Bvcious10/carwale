pipeline{
    agent any
    tools{
        nodejs 'node16'
    }
    stages{
        // stage('SAST scans'){
        //     steps{
        //       parallel(
        //         "semgrep":{
        //             dir('client/src'){
        //                 catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        //                 sh "docker run --rm -v ${pwd}:/src --workdir /src returntocorp/semgrep-agent:v1 semgrep-agent --config p/ci"
        //                 }
        //             }

        //                 },
        //                 "njsscan":{
        //                     dir('client/src'){
        //                         catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        //                         sh "docker run --rm -v ${pwd}:/src opensecurity/njsscan /src"
        //                         }
        //                     }
        //                 },
        //                 "trivyfs":{
        //                     dir('client/src'){
        //                         catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        //                         sh "trivy fs ."
        //                         }

        //                     }
        //                 }
        //             )
        //         }
        //         post{
        //             always{
        //                 echo "SAST stage completed"
        //             }
        //         }
        //     }
        //     stage('install dependencies'){
        //         steps{
        //             dir('client'){
        //             sh "npm install"
        //             }

        //         }
        //     }

        //     stage('SCA scans'){
        //         steps{
        //             script{
        //                 dir('client'){
        //                     catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        //                     dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'dep-check'
        //                     dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //                     }

        //                 }
        //             }
        //         }
        //         post{
        //             always{
        //                 echo "SCA stage completed"
        //             }
        //         }
                
        //     }

            stage('Vulnerability check-docker'){
                steps{
                    parallel(
                        "OPA Conftest":{
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sh "docker run --rm -v $WORKSPACE:/project openpolicyagent/conftest test --policy opa-docker.rego Dockerfile"
                                }
                            

                        },
                        // "Trivy scan":{
                        //     dir('client'){
                        //         catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        //         sh "bash trivy-base-image-scan.sh"
                        //         }
                        //     }

                        // }
                    )
                }
                // post{
                //     always{
                //         echo "vulnerability check stage completed"
                //     }
                // }
            }

            // stage('Build docker image'){
            //     steps{
            //         script{
            //             withDockerRegistry(credentialsId: 'docker', toolName: 'docker', url: 'docker.io') {
            //                 dir('client'){
            //                     sh 'docker build -t benvic/car-app:"$GIT_COMMIT"'
            //                     sh 'docker push -t benvic/car-app:"$GIT_COMMIT"'
            //                 }
            //             }
            //         }
            //     }
            // }

            // stage('docker-image-scan'){
            //     steps{
            //         dir('client'){
            //             sh 'trivy image benvic/car-app:"$GIT_COMMIT"'
            //         }
            //     }
            // }
        }
    }
